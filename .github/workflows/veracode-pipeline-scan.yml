name: Veracode Static Pipeline Scanner

on:
  workflow_call:
    inputs:
      policy_name:
        required: true
        type: string
      owner:
        required: true
        type: string
      repo:
        required: true
        type: string
      sha:
        required: true
        type: string
      token:
        required: true
        type: string
      ref:
        required: true
        type: string
      create_code_scanning_alert:
        required: true
        type: boolean
      create_issue:
        required: true
        type: boolean
      check_run_id:
        required: true
        type: string
      source_repository:
          required: true
          type: string
      profile_name:
          required: true
          type: string
      break_build_policy_findings: 
          required: true
          type: string
      break_build_on_error: 
          required: true
          type: string
      filter_mitigated_flaws: 
          required: true
          type: string
      language:
        required: true
        type: string
      default_runs_on:
        required: true
        type: string

jobs:
  prepare_pipeline_scan:
    runs-on: ${{ fromJson(inputs.default_runs_on) }}
    name: prepare pipeline scan
    outputs:
      matrix_files: ${{ steps.get-files.outputs.matrix_files }} 

    steps:      
      # get the compiled binary from a previous job
      - name: get archive
        uses: actions/download-artifact@v3
        with:
          name: veracode-artifact
          path: ./veracode_artifact_directory

      - name: Get list of files for matrix
        id: get-files
        run: |
          files=$(ls -1 veracode_artifact_directory | jq -R . | jq -s .)
          echo "Files for matrix: $files"
          files=$(echo $files | jq -c .)  # Compact the JSON array to a single line
          echo "matrix_files=$files" >> $GITHUB_OUTPUT
        shell: bash

  pipeline_scan:
    runs-on: ${{ fromJson(inputs.default_runs_on) }}
    needs: prepare_pipeline_scan
    strategy:
      matrix:
        file: ${{fromJson(needs.prepare_pipeline_scan.outputs.matrix_files)}}

    steps:
      # - uses: actions/checkout@v4
      #   with:
      #     repository: ${{ inputs.owner }}/${{ inputs.repo }}
      #     ref: ${{ inputs.ref }}
      #     token: ${{ inputs.token }}

      - name: get archive
        uses: actions/download-artifact@v3
        with:
          name: veracode-artifact
          path: ./veracode_artifact_directory
      - name: Debug Matrix Content
        run: |
          echo "Raw matrix files: ${{ needs.prepare_pipeline_scan.outputs.matrix_files }}"
          echo "Current Matrix: ${{ matrix }}"
          echo "Current File: ${{ matrix.file }}"

      - name: Veracode Pipeline-Scan
        if: always()
        id: pipeline-scan
        uses: ./actions/pipeline-scan
        with:
          vid: ${{ secrets.VERACODE_API_ID }}
          vkey: ${{ secrets.VERACODE_API_KEY }}
          veracode_policy_name: ${{ inputs.policy_name }}
          file: ./veracode_artifact_directory/${{ matrix.file }}
          fail_build: ${{ inputs.break_build_policy_findings }}
          summary_output: true
          summary_output_file: ${{ strategy.job-index }}-results.txt
          json_output: true
          json_output_file: ${{ strategy.job-index }}-results.json
          filtered_json_output_file: ${{ strategy.job-index }}-filtered_results.json
          artifact_name: ${{ matrix.file }}
          debug: 1
          workflow_app: true
          platformType: 'ENTERPRISE'
    
      - name: Veracode Pipeline Results
        if: always()
        id: prepare-results
        uses: ./actions/integration-helper
        with:
          action: 'preparePipelineResults'
          token: ${{ inputs.token }}
          check_run_id: ${{ inputs.check_run_id }}
          vid: ${{ secrets.VERACODE_API_ID }}
          vkey: ${{ secrets.VERACODE_API_KEY }}
          appname: ${{ inputs.profile_name }}
          source_repository: ${{ inputs.source_repository }}
          fail_checks_on_policy: ${{ inputs.break_build_policy_findings }}
          fail_checks_on_error: ${{ inputs.break_build_on_error }} 
          filter_mitigated_flaws: ${{ inputs.filter_mitigated_flaws }}
          filtered_results_file: ${{ strategy.job-index }}-filtered_results.json
          platformType: 'ENTERPRISE'

      - name: Convert pipeline scan output to SARIF format
        if: ${{ inputs.create_code_scanning_alert && always() }}
        uses: ./actions/flaws-to-sarif
        with:
          pipeline-results-json: mitigated_${{ strategy.job-index }}-filtered_results.json
          output-results-sarif: veracode-results.sarif
          repo_owner: ${{ inputs.owner }}
          repo_name: ${{ inputs.repo }}
          commitSHA: ${{ inputs.sha }}
          ref: ${{ inputs.ref }}
          githubToken: ${{ inputs.token }}

      - name: Create flaws as issues
        if: ${{ inputs.create_issue && always() }}
        uses: ./actions/flaws-to-issues
        with:
          scan-results-json: mitigated_${{ strategy.job-index }}-filtered_results.json
          repo_owner: ${{ inputs.owner }}
          github-token: ${{ inputs.token }}
          repo_name: ${{ inputs.repo }}
          commitHash: ${{ inputs.sha }}

  update-checks-status:
    runs-on: ${{ fromJson(inputs.default_runs_on) }}
    needs: pipeline_scan
    if: always()
    steps:
     - name: Update check
       id: update_check_status
       shell: bash
       env:
        BREAK_BUILD_ON_ERROR: ${{ inputs.break_build_on_error }}
        BREAK_BUILD_ON_POLICY: ${{ inputs.break_build_policy_findings }}
       run: |
            success_count=0
            conclusion="failure"
            # Convert JSON string to a proper format for jq processing
            echo '${{ toJSON(needs) }}' | jq -c 'to_entries[]' | while read -r job; do
              status=$(echo "$job" | jq -r '.value.result')
              echo "$status"
              if [ "$status" = "success" ]; then
                success_count=$((success_count + 1))
                echo '{"status": "completed", "conclusion": "success"}' > payload.txt
              elif [ "$status" = "failure" ]; then
                if [ "$BREAK_BUILD_ON_ERROR" = "false" && "$BREAK_BUILD_ON_POLICY" = "false" ]; then
                  echo '{"status": "completed", "conclusion": "success"}' > payload.txt
                else
                  echo '{"status": "completed", "conclusion": "failure"}' > payload.txt
                fi
              fi
              curl -X PATCH \
                -H "Authorization: Bearer ${{ inputs.token }}" \
                -H "Accept: application/vnd.github+json" \
                $GITHUB_API_URL/repos/${{ inputs.owner }}/${{ inputs.repo }}/check-runs/${{ inputs.check_run_id }} \
                -d @"payload.txt"
            done

  cleanup:
    runs-on: ${{ fromJson(inputs.default_runs_on) }}
    if: always()
    needs: [pipeline_scan]
    steps:
      - name: Cleanup workspace
        run: |
          echo "Running final cleanup..."
          sudo rm -rf $GITHUB_WORKSPACE/
