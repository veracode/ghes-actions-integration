name: Veracode Static Policy Scanner

on:
  workflow_call:
    inputs:
      profile_name:
        required: true
        type: string
      policy_name:
        required: true
        type: string
      modules_to_scan:
        required: true
        type: string
      owner:
        required: true
        type: string
      repo:
        required: true
        type: string
      sha:
        required: true
        type: string
      token:
        required: true
        type: string
      ref:
        required: true
        type: string
      create_code_scanning_alert:
        required: true
        type: boolean
      create_issue:
        required: true
        type: boolean
      check_run_id:
        required: true
        type: string
      source_repository:
          required: true
          type: string
      break_build_policy_findings: 
          required: true
          type: string
      break_build_on_error: 
          required: true
          type: string
      filter_mitigated_flaws: 
          required: true
          type: string
      language:
        required: true
        type: string
      default_runs_on:
        required: true
        type: string

jobs:
  policy_scan:
    runs-on: ${{ fromJSON(inputs.default_runs_on) }}
    name: policy scan

    steps:
      - name: checkout repo
        uses: actions/checkout@v4
      
      # get the compiled binary from a previous job
      - name: get archive
        uses: actions/download-artifact@v3
        with:
          name: veracode-artifact
          path: ./veracode_artifact_directory

      - name: set version
        run: |
          echo "VERSION=${{ github.run_id }}-$(date +'%Y%m%d-%H%M%S')" >> $GITHUB_ENV

      # run the policy scan action
      - name: Veracode Upload and Scan Action Step
        uses: ./actions/policy-scan
        id: upload_and_scan
        with:
          appname: ${{ inputs.profile_name }}
          createprofile: true
          policy: ${{ inputs.policy_name }}
          version: '${{ env.VERSION }}'
          filepath: ./veracode_artifact_directory/
          vid: '${{ secrets.VERACODE_API_ID }}'
          vkey: '${{ secrets.VERACODE_API_KEY }}'
          #scanpollinginterval: 30
          scantimeout: 30
          # include: ${{ inputs.modules_to_scan }}
          failbuild: ${{ inputs.break_build_policy_findings }}
          gitRepositoryUrl: ${{ github.server_url }}/${{ inputs.source_repository }}
          deleteincompletescan: true
          platformType: 'ENTERPRISE'

      - name: Veracode Policy Results
        id: prepare-results
        if: always()
        uses: ./actions/integration-helper
        with:
          action: 'preparePolicyResults'
          token: ${{ inputs.token }}
          check_run_id: ${{ inputs.check_run_id }}
          vid: ${{ secrets.VERACODE_API_ID }}
          vkey: ${{ secrets.VERACODE_API_KEY }}
          appname: ${{ inputs.profile_name }}
          source_repository: ${{ inputs.source_repository }}
          fail_checks_on_policy: ${{ inputs.break_build_policy_findings }}
          fail_checks_on_error: ${{ inputs.break_build_on_error }}
          filter_mitigated_flaws: ${{ inputs.filter_mitigated_flaws }}
          head_sha: ${{ inputs.sha }}
          gitRepositoryUrl: ${{ github.server_url }}/${{ inputs.source_repository }}
          platformType: 'ENTERPRISE'

  veracode-remove-sandbox:
    needs: policy_scan
    runs-on: ${{ fromJSON(inputs.default_runs_on) }}
    if: ${{ github.event.client_payload.user_config.sandbox_scan.execute_remove_sandbox_action && always() }}
    name: Remove Sandbox
    steps:
      - uses: ./actions/integration-helper
        with:
          action: 'removeSandbox'
          vid: ${{ secrets.VERACODE_API_ID }}
          vkey: ${{ secrets.VERACODE_API_KEY }}
          appname: ${{ github.event.client_payload.user_config.profile_name }}
          sandboxname: GitHub App Scans-${{ github.event.client_payload.user_config.sandbox_scan.branch }}
          platformType: 'ENTERPRISE'

  code-scanning-alert:
    needs: policy_scan
    runs-on: ${{ fromJSON(inputs.default_runs_on) }}
    if: ${{ inputs.create_code_scanning_alert && always() }}
    name: Create code scanning alerts
    steps:
      - uses: actions/checkout@v4
        with:
          repository: ${{ inputs.owner }}/${{ inputs.repo }}
          ref: ${{ inputs.ref }}
          token: ${{ inputs.token }}

      - name: Get scan results
        uses: actions/download-artifact@v3
        with:
          name: policy-flaws
          path: /tmp

      - name: Convert policy scan output to SARIF format
        uses: ./actions/flaws-to-sarif
        with:
          scan-type: policy
          results-json: '/tmp/policy_flaws.json'
          output-results-sarif: veracode-results.sarif
          repo_owner: ${{ inputs.owner }}
          repo_name: ${{ inputs.repo }}
          commitSHA: ${{ inputs.sha }}
          ref: ${{ inputs.ref }}
          githubToken: ${{ inputs.token }}

  create-issues:
    needs: policy_scan
    if: ${{ inputs.create_issue && always() }}
    runs-on: ${{ fromJSON(inputs.default_runs_on) }}
    name: Create issues
    steps:
      - uses: actions/checkout@v4
        with:
          repository: ${{ inputs.owner }}/${{ inputs.repo }}
          ref: ${{ inputs.ref }}
          token: ${{ inputs.token }}

      - name: Get flaw file
        uses: actions/download-artifact@v3
        with:
          name: 'policy-flaws'
          path: /tmp

      - name: Create flaws as issues
        uses: ./actions/flaws-to-issues
        with:
          scan-results-json: '/tmp/policy_flaws.json'
          repo_owner: ${{ inputs.owner }}
          repo_name: ${{ inputs.repo }}
          github-token: ${{ inputs.token }}
          commitHash: ${{ inputs.sha }}

      - name: cleanup job
        if: always()
        run: |
          echo "Running cleanup..."
          sudo rm -rf $GITHUB_WORKSPACE/
